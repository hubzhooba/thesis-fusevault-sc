import { useState, useEffect, useMemo } from 'react';
import {
  Container,
  Typography,
  Box,
  Grid,
  Paper,
  Button,
  TextField,
  CircularProgress,
  Card,
  CardContent,
  Divider,
  Avatar,
  Chip,
  IconButton,
  CardActions,
  CardHeader,
  Tooltip,
  Stack,
  Alert,
  LinearProgress,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions
} from '@mui/material';
import { useNavigate } from 'react-router-dom';
import {
  AddCircleOutline,
  Search,
  TrendingUp,
  Storage,
  SwapHoriz,
  DeleteOutline,
  Update,
  CloudUpload,
  MoreVert,
  Check,
  Timeline,
  Person,
  GitHub,
  Twitter,
  LinkedIn,
  Work,
  LocationOn,
  SelectAll,
  CheckBox,
  CheckBoxOutlineBlank
} from '@mui/icons-material';
import AssetCard from '../components/AssetCard';
import BatchDeleteModal from '../components/BatchDeleteModal';
import RecentActivityFeed from '../components/RecentActivityFeed';
import UsernameInput from '../components/UsernameInput';
import { useAssets } from '../hooks/useAssets';
import { useTransactions } from '../hooks/useTransactions';
import { useAuth } from '../contexts/AuthContext';
import { useUser } from '../hooks/useUser';
import { formatWalletAddress } from '../utils/formatters';

function DashboardPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [openSetupDialog, setOpenSetupDialog] = useState(false);
  const [email, setEmail] = useState('');
  const [name, setName] = useState('');
  const [username, setUsername] = useState('');
  const [isUsernameValid, setIsUsernameValid] = useState(false);
  
  // Batch delete state
  const [selectionMode, setSelectionMode] = useState(false);
  const [selectedAssets, setSelectedAssets] = useState(new Set());
  const [batchDeleteModalOpen, setBatchDeleteModalOpen] = useState(false);
  const { currentAccount, isAuthenticated } = useAuth();
  const { user, isLoading: userLoading, register, onboard, isRegistering, isOnboarding, error: userError } = useUser();
  const { assets, isLoading: assetsLoading, refreshAssets } = useAssets();
  const {
    summary,
    recentTransactions,
    allTransactions,
    isSummaryLoading,
    isRecentLoading,
    getAllTransactions
  } = useTransactions();

  // Fetch all transactions when dashboard loads
  useEffect(() => {
    if (currentAccount && isAuthenticated) {
      getAllTransactions();
    }
  }, [currentAccount, isAuthenticated, getAllTransactions]);

  // Calculate action counts from all transactions
  const actionCounts = useMemo(() => {
    if (!allTransactions || allTransactions.length === 0) {
      return summary.actions || {};
    }

    const counts = {};
    allTransactions.forEach(tx => {
      if (tx.action) {
        // Group similar actions (e.g., CREATE, VERSION_CREATE would both count toward 'CREATE')
        let actionType = tx.action;
        if (actionType.includes('CREATE')) actionType = 'CREATE';
        else if (actionType.includes('UPDATE')) actionType = 'UPDATE';
        else if (actionType.includes('DELETE')) actionType = 'DELETE';

        counts[actionType] = (counts[actionType] || 0) + 1;
      }
    });

    return counts;
  }, [allTransactions, summary.actions]);

  const navigate = useNavigate();

  // Check if we need to show the setup dialog
  useEffect(() => {
    // Show dialog if:
    // 1. User data failed to load (userError), OR
    // 2. User exists but has no proper profile (no id or no username), OR
    // 3. User has auto-generated username but incomplete profile (no name and no email)
    const isAutoGeneratedUser = user && user.username && !user.name && !user.email;
    const needsSetup = userError || 
                      (user && (!user.id || !user.username)) || 
                      isAutoGeneratedUser;
    
    if (needsSetup && !userLoading && !isOnboarding && currentAccount) {
      setOpenSetupDialog(true);
    } else {
      // Close dialog if setup is complete
      setOpenSetupDialog(false);
    }
  }, [userError, user, userLoading, isOnboarding, currentAccount]);

  // Handle username validation change
  const handleUsernameValidation = (validation) => {
    setIsUsernameValid(validation.isValid);
  };

  // Handle setup form submission
  const handleSetupSubmit = () => {
    if (isUsernameValid && username) {
      onboard({
        wallet_address: currentAccount,
        email: email || null, // Email is optional
        name: name || 'FuseVault User',
        username: username,
        role: 'user'
      });
      setOpenSetupDialog(false);
    }
  };

  // Handle search input change
  const handleSearchChange = (event) => {
    setSearchTerm(event.target.value);
  };

  // Batch selection handlers
  const toggleSelectionMode = () => {
    setSelectionMode(!selectionMode);
    setSelectedAssets(new Set()); // Clear selection when toggling mode
  };

  const handleAssetSelect = (assetId) => {
    const newSelection = new Set(selectedAssets);
    if (newSelection.has(assetId)) {
      newSelection.delete(assetId);
    } else {
      newSelection.add(assetId);
    }
    setSelectedAssets(newSelection);
  };

  const handleSelectAll = () => {
    if (selectedAssets.size === filteredAssets.length) {
      setSelectedAssets(new Set());
    } else {
      setSelectedAssets(new Set(filteredAssets.map(asset => asset.assetId)));
    }
  };

  const handleBatchDelete = () => {
    if (selectedAssets.size === 0) return;
    setBatchDeleteModalOpen(true);
  };

  const handleBatchDeleteSuccess = () => {
    // Reset selection state
    setSelectedAssets(new Set());
    setSelectionMode(false);
    setBatchDeleteModalOpen(false);
    
    // Refresh the assets list without page reload
    refreshAssets();
  };

  const getSelectedAssetsData = () => {
    return filteredAssets.filter(asset => selectedAssets.has(asset.assetId));
  };

  // Filter assets based on search term
  const filteredAssets = assets.filter(asset => {
    if (!searchTerm) return true;

    const searchLower = searchTerm.toLowerCase();
    return (
      asset.criticalMetadata?.name?.toLowerCase().includes(searchLower) ||
      asset.assetId?.toLowerCase().includes(searchLower) ||
      asset.criticalMetadata?.tags?.some(tag => tag.toLowerCase().includes(searchLower))
    );
  });

  if (userLoading) {
    return (
      <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
        <Box sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', minHeight: '50vh' }}>
          <CircularProgress />
        </Box>
      </Container>
    );
  }

  return (
    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
      {/* Welcome Section */}
      <Box sx={{ mb: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          Welcome back{user?.name ? `, ${user.name}` : ''}!
        </Typography>
        <Typography variant="body1" color="text.secondary">
          Here's an overview of your digital assets and recent activity.
        </Typography>
      </Box>

      <Grid container spacing={3}>
        {/* User Profile Card */}
        <Grid item xs={12} md={4}>
          <Card sx={{ height: 'fit-content' }}>
            <CardHeader
              avatar={
                <Avatar 
                  sx={{ 
                    bgcolor: 'primary.main', 
                    width: 56, 
                    height: 56,
                    fontSize: '1.5rem',
                    fontWeight: 600
                  }}
                  src={user?.profile_image}
                >
                  {user?.name ? user.name.charAt(0).toUpperCase() : <Person />}
                </Avatar>
              }
              title={
                <Typography variant="h6" sx={{ fontWeight: 600, fontSize: '1.1rem' }}>
                  {user?.name || 'FuseVault User'}
                </Typography>
              }
              subheader={
                <Box>
                  {user?.username && (
                    <Typography variant="body2" color="primary.main" component="div" sx={{ fontWeight: 500 }}>
                      @{user.username}
                    </Typography>
                  )}
                  <Typography variant="body2" color="text.secondary" component="div" sx={{ fontSize: '0.85rem' }}>
                    {formatWalletAddress(currentAccount)}
                  </Typography>
                </Box>
              }
            />
            <CardContent sx={{ pt: 1.5, pb: 1 }}>
              {userLoading ? (
                <CircularProgress size={24} />
              ) : (
                <>
                  {user?.bio && (
                    <Typography variant="body2" color="text.secondary" paragraph sx={{ mb: 2.5, fontSize: '0.9rem' }}>
                      {user.bio}
                    </Typography>
                  )}

                  {user?.organization && (
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      <Work sx={{ mr: 1.5, fontSize: 18, color: 'text.secondary' }} />
                      <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                        {user.job_title ? `${user.job_title} at ${user.organization}` : user.organization}
                      </Typography>
                    </Box>
                  )}

                  {user?.location && (
                    <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                      <LocationOn sx={{ mr: 1.5, fontSize: 18, color: 'text.secondary' }} />
                      <Typography variant="body2" sx={{ fontSize: '0.9rem' }}>
                        {user.location}
                      </Typography>
                    </Box>
                  )}

                  <Box sx={{ display: 'flex', gap: 1, mt: 2 }}>
                    {user?.github && (
                      <Tooltip title="GitHub">
                        <IconButton
                          size="medium"
                          component="a"
                          href={user.github.startsWith('http') ? user.github : `https://github.com/${user.github}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          sx={{ p: 1 }}
                        >
                          <GitHub fontSize="medium" />
                        </IconButton>
                      </Tooltip>
                    )}
                    {user?.twitter && (
                      <Tooltip title="Twitter">
                        <IconButton
                          size="medium"
                          component="a"
                          href={user.twitter.startsWith('http') ? user.twitter : `https://twitter.com/${user.twitter}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          sx={{ p: 1 }}
                        >
                          <Twitter fontSize="medium" />
                        </IconButton>
                      </Tooltip>
                    )}
                    {user?.linkedin && (
                      <Tooltip title="LinkedIn">
                        <IconButton
                          size="medium"
                          component="a"
                          href={user.linkedin.startsWith('http') ? user.linkedin : `https://linkedin.com/in/${user.linkedin}`}
                          target="_blank"
                          rel="noopener noreferrer"
                          sx={{ p: 1 }}
                        >
                          <LinkedIn fontSize="medium" />
                        </IconButton>
                      </Tooltip>
                    )}
                  </Box>
                </>
              )}
            </CardContent>
            <CardActions sx={{ pt: 0.5 }}>
              <Button
                size="small"
                onClick={() => navigate('/profile')}
              >
                Edit Profile
              </Button>
            </CardActions>
          </Card>
        </Grid>

        {/* Stats */}
        <Grid item xs={12} md={8}>
          <Grid container spacing={2}>
            {/* Total Assets Card - CLICKABLE */}
            <Grid item xs={12} sm={6}>
              <Card
                sx={{
                  bgcolor: 'primary.light',
                  color: 'primary.contrastText',
                  cursor: 'pointer',
                  '&:hover': {
                    bgcolor: 'primary.main',
                    transform: 'translateY(-2px)',
                    transition: 'all 0.2s ease-in-out'
                  }
                }}
                onClick={() => {
                  // Scroll to assets section
                  const assetsSection = document.getElementById('assets-section');
                  if (assetsSection) {
                    assetsSection.scrollIntoView({ behavior: 'smooth' });
                  }
                }}
              >
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                    <Box>
                      <Typography variant="subtitle2" sx={{ opacity: 0.8 }}>
                        Total Assets
                      </Typography>
                      <Typography variant="h4">
                        {isSummaryLoading || assetsLoading ?
                          <CircularProgress size={24} color="inherit" /> :
                          (filteredAssets.length || assets.length || summary?.total_assets || 0)
                        }
                      </Typography>
                    </Box>
                    <Avatar sx={{ bgcolor: 'primary.dark' }}>
                      <Storage />
                    </Avatar>
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            {/* Total Transactions Card - CLICKABLE */}
            <Grid item xs={12} sm={6}>
              <Card
                sx={{
                  bgcolor: 'secondary.light',
                  color: 'secondary.contrastText',
                  cursor: 'pointer',
                  '&:hover': {
                    bgcolor: 'secondary.main',
                    transform: 'translateY(-2px)',
                    transition: 'all 0.2s ease-in-out'
                  }
                }}
                onClick={() => navigate('/history')}
              >
                <CardContent>
                  <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start' }}>
                    <Box>
                      <Typography variant="subtitle2" sx={{ opacity: 0.8 }}>
                        Total Transactions
                      </Typography>
                      <Typography variant="h4">
                        {isSummaryLoading ?
                          <CircularProgress size={24} color="inherit" /> :
                          (allTransactions.length || summary?.total_transactions || 0)
                        }
                      </Typography>
                    </Box>
                    <Avatar sx={{ bgcolor: 'secondary.dark' }}>
                      <Timeline />
                    </Avatar>
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            {/* Recent Activity Feed - spans across both metric card columns */}
            <Grid item xs={12} sm={12} sx={{ mt: 1 }}>
              <RecentActivityFeed
                transactions={recentTransactions}
                isLoading={isRecentLoading}
                maxItems={8}
              />
            </Grid>
          </Grid>
        </Grid>
      </Grid>

      {/* Quick Actions */}
      <Paper sx={{ p: 3, mt: 4 }}>
        <Typography variant="h6" gutterBottom>
          Quick Actions
        </Typography>
        <Grid container spacing={2}>
          <Grid item>
            <Button
              variant="contained"
              startIcon={<AddCircleOutline />}
              onClick={() => navigate('/upload')}
            >
              Create Asset
            </Button>
          </Grid>
          <Grid item>
            <Button
              variant="outlined"
              startIcon={<Timeline />}
              onClick={() => navigate('/history')}
            >
              View History
            </Button>
          </Grid>
        </Grid>
      </Paper>

      {/* Assets Section */}
      <Paper sx={{ mt: 4 }}>
        <Box id="assets-section" sx={{ p: 3 }}>
          <Box sx={{ 
            display: 'flex', 
            justifyContent: 'space-between', 
            alignItems: 'center', 
            mb: 2,
            position: 'sticky',
            top: 0,
            left: 0,
            right: 0,
            zIndex: 10,
            backgroundColor: 'background.paper',
            borderBottom: '1px solid',
            borderColor: 'divider',
            py: 2,
            px: 3,
            mx: -3,
            mt: -1
          }}>
            <Typography variant="h6">
              Your Assets ({assets.length})
              {selectionMode && (
                <Chip 
                  label={`${selectedAssets.size} selected`} 
                  size="small" 
                  sx={{ ml: 1 }}
                  color={selectedAssets.size > 0 ? "primary" : "default"}
                />
              )}
            </Typography>

            <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
              <TextField
                size="small"
                placeholder="Search assets..."
                value={searchTerm}
                onChange={handleSearchChange}
                InputProps={{
                  startAdornment: <Search sx={{ color: 'action.active', mr: 1 }} />
                }}
              />
              
              {/* Batch selection controls */}
              {selectionMode ? (
                <>
                  <Button
                    size="small"
                    onClick={handleSelectAll}
                    startIcon={selectedAssets.size === filteredAssets.length ? <CheckBox /> : <CheckBoxOutlineBlank />}
                  >
                    {selectedAssets.size === filteredAssets.length ? 'Deselect All' : 'Select All'}
                  </Button>
                  <Button
                    variant="contained"
                    color="error"
                    size="small"
                    onClick={handleBatchDelete}
                    disabled={selectedAssets.size === 0}
                    startIcon={<DeleteOutline />}
                  >
                    Delete ({selectedAssets.size})
                  </Button>
                  <Button
                    variant="outlined"
                    size="small"
                    onClick={toggleSelectionMode}
                  >
                    Cancel
                  </Button>
                </>
              ) : (
                <>
                  {assets.length > 0 && (
                    <Button
                      variant="outlined"
                      size="small"
                      onClick={toggleSelectionMode}
                      startIcon={<SelectAll />}
                    >
                      Select
                    </Button>
                  )}
                  <Button
                    variant="contained"
                    startIcon={<AddCircleOutline />}
                    onClick={() => navigate('/upload')}
                  >
                    Create Asset
                  </Button>
                </>
              )}
            </Box>
          </Box>

          {assetsLoading ? (
            <Box sx={{ display: 'flex', justifyContent: 'center', p: 4 }}>
              <CircularProgress />
            </Box>
          ) : filteredAssets.length === 0 ? (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <Typography variant="body1" paragraph>
                No assets found.
              </Typography>
              <Button
                variant="contained"
                startIcon={<AddCircleOutline />}
                onClick={() => navigate('/upload')}
              >
                Create Your First Asset
              </Button>
            </Box>
          ) : (
            <Grid container spacing={3}>
              {filteredAssets.map((asset) => (
                <Grid item xs={12} sm={6} md={4} key={asset._id || asset.id}>
                  <Box 
                    sx={{ 
                      position: 'relative',
                      cursor: selectionMode ? 'pointer' : 'default'
                    }}
                    onClick={selectionMode ? () => handleAssetSelect(asset.assetId) : undefined}
                  >
                    {selectionMode && (
                      <Box
                        sx={{
                          position: 'absolute',
                          bottom: 8,
                          right: 8,
                          zIndex: 1,
                          backgroundColor: 'white',
                          borderRadius: '4px',
                          padding: '2px'
                        }}
                      >
                        {selectedAssets.has(asset.assetId) ? (
                          <CheckBox color="primary" />
                        ) : (
                          <CheckBoxOutlineBlank />
                        )}
                      </Box>
                    )}
                    <AssetCard 
                      asset={asset} 
                      sx={{ 
                        border: selectionMode && selectedAssets.has(asset.assetId) 
                          ? '2px solid' 
                          : '1px solid transparent',
                        borderColor: selectionMode && selectedAssets.has(asset.assetId) 
                          ? 'primary.main' 
                          : 'transparent',
                        opacity: selectionMode && !selectedAssets.has(asset.assetId) ? 0.7 : 1
                      }}
                    />
                  </Box>
                </Grid>
              ))}
            </Grid>
          )}
        </Box>
      </Paper>

      {/* User Setup Dialog */}
      <Dialog 
        open={openSetupDialog} 
        onClose={() => setOpenSetupDialog(false)}
        maxWidth="sm"
        fullWidth
      >
        <DialogTitle>Complete Your Profile</DialogTitle>
        <DialogContent>
          <DialogContentText sx={{ mb: 2 }}>
            Welcome to FuseVault! Let's set up your profile to get started.
          </DialogContentText>
          
          <UsernameInput
            value={username}
            onChange={setUsername}
            onValidationChange={handleUsernameValidation}
            required
            autoFocus
            helperText="Choose a unique username that others can use to find you"
            margin="normal"
            currentUserUsername={null}
          />
          
          <TextField
            margin="normal"
            label="Email Address (Optional)"
            type="email"
            fullWidth
            variant="outlined"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            helperText="Where people can reach out to you"
          />
          
          <TextField
            margin="normal"
            label="Name (Optional)"
            type="text"
            fullWidth
            variant="outlined"
            value={name}
            onChange={(e) => setName(e.target.value)}
            helperText="Your display name"
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setOpenSetupDialog(false)}>Skip</Button>
          <Button
            onClick={handleSetupSubmit}
            variant="contained"
            disabled={!username || !isUsernameValid || isOnboarding}
          >
            {isOnboarding ? 'Creating...' : 'Complete Setup'}
          </Button>
        </DialogActions>
      </Dialog>

      {/* Batch Delete Modal */}
      <BatchDeleteModal
        open={batchDeleteModalOpen}
        onClose={() => setBatchDeleteModalOpen(false)}
        selectedAssets={getSelectedAssetsData()}
        onDeleteSuccess={handleBatchDeleteSuccess}
      />
    </Container>
  );
}

export default DashboardPage;